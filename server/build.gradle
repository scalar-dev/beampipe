plugins {
    id "org.jetbrains.kotlin.jvm" version "1.5.30"
    id "org.jetbrains.kotlin.kapt" version "1.5.30"
    id "org.jetbrains.kotlin.plugin.allopen" version "1.5.30"
    id("com.github.johnrengelman.shadow") version "6.1.0"
    id("io.micronaut.application") version "1.2.0"
    id 'com.google.cloud.tools.jib' version '3.1.4'
}

version "0.1"
group "io.beampipe"

repositories {
    mavenCentral()
    jcenter()
}

micronaut {
    runtime("netty")
    testRuntime("junit5")
    processing {
        incremental(true)
        annotations("io.beampipe.*")
    }
}

dependencies {
    implementation(platform("io.micronaut:micronaut-bom:$micronautVersion"))
    annotationProcessor platform("io.micronaut:micronaut-bom:$micronautVersion")
    kapt(platform("io.micronaut:micronaut-bom:$micronautVersion"))
    kaptTest(platform("io.micronaut:micronaut-bom:$micronautVersion"))

    annotationProcessor "io.micronaut:micronaut-inject-java"
    kapt("io.micronaut:micronaut-inject-java")
    kaptTest("io.micronaut:micronaut-inject-java")

    kapt("io.micronaut:micronaut-validation")
    kapt("io.micronaut.security:micronaut-security-annotations")
    implementation("io.micronaut:micronaut-inject")
    implementation("io.micronaut:micronaut-validation")
    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8:${kotlinVersion}")
    implementation("org.jetbrains.kotlin:kotlin-reflect:${kotlinVersion}")
    implementation("io.micronaut.kotlin:micronaut-kotlin-runtime")
    implementation("io.micronaut:micronaut-runtime")
    implementation("io.micronaut:micronaut-http-server-netty")
    implementation("io.micronaut:micronaut-http-client")
    kapt("io.micronaut:micronaut-http-client")
    kaptTest("io.micronaut:micronaut-http-client")
    implementation("io.micronaut.security:micronaut-security-oauth2")
    implementation("io.micronaut.security:micronaut-security-jwt")
    runtimeOnly("ch.qos.logback:logback-classic")
    implementation("com.fasterxml.jackson.module:jackson-module-kotlin")
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-jsr310"

    implementation 'io.micronaut.flyway:micronaut-flyway'
    runtimeOnly 'io.micronaut.sql:micronaut-jdbc-hikari'
    implementation group: 'org.postgresql', name: 'postgresql', version: '42.2.14'

    implementation "org.jetbrains.exposed:exposed-core:$exposedVersion"
    implementation "org.jetbrains.exposed:exposed-dao:$exposedVersion"
    implementation "org.jetbrains.exposed:exposed-jdbc:$exposedVersion"
    implementation "org.jetbrains.exposed:exposed-java-time:$exposedVersion"

    implementation 'io.micronaut.graphql:micronaut-graphql'
    implementation 'com.expediagroup:graphql-kotlin-schema-generator:3.4.1'

    implementation("com.maxmind.geoip2:geoip2:2.14.0")
    implementation("io.whitfin:siphash:2.0.0")

    implementation("com.stripe:stripe-java:19.35.0")

    implementation("nl.basjes.parse.useragent:yauaa:5.19")

    implementation("com.slack.api:bolt-micronaut:1.1.1")
    implementation("org.jetbrains.kotlinx:kotlinx-coroutines-jdk8:1.3.8")

    implementation("commons-validator:commons-validator:1.7")
    implementation("com.snowplowanalytics:java-referer-parser:0.4.0-rc4")
    implementation("com.neovisionaries:nv-i18n:1.27")

    kaptTest(platform("io.micronaut:micronaut-bom:$micronautVersion"))
    kaptTest("io.micronaut:micronaut-inject-java")
    testImplementation(platform("io.micronaut:micronaut-bom:$micronautVersion"))
    testImplementation("org.junit.jupiter:junit-jupiter-api")
    testImplementation("io.micronaut.test:micronaut-test-junit5")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine")

    testImplementation "org.mockito:mockito-junit-jupiter:2.22.0"

    testImplementation "org.testcontainers:testcontainers:1.12.3"
    testImplementation "org.testcontainers:postgresql:1.12.3"
    testImplementation "org.testcontainers:junit-jupiter:1.12.3"
}

mainClassName = "io.beampipe.server.ApplicationKt"

allOpen {
    annotation("io.micronaut.aop.Around")
}

compileKotlin {
    kotlinOptions {
        jvmTarget = '1.8'
        //Will retain parameter names for Java reflection
        javaParameters = true
    }
}
compileTestKotlin {
    kotlinOptions {
        jvmTarget = '1.8'
        javaParameters = true
    }
}

shadowJar {
    mergeServiceFiles()
}

jib {
    from {
        image = "gcr.io/distroless/java:11"
    }

    extraDirectories {
        paths {
            path {
                from = file("../geolite2/")
                into = "/data"
            }
        }
    }
}



